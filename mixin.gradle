
// === === === === === === Mixin Path Start === === === === === ===

def mixinConfig = "mixins.${modId}.json"
def refMapping = "mixins.${modId}.refmap.json"

if (!project.embedMixin.toBoolean()) {
    version += "-mixinless"
}

repositories {
    maven {
        name = "sponge"
        url = "https://repo.spongepowered.org/maven/"
    }
}

dependencies {
    if (project.embedMixin.toBoolean()) {
        includeCompile('org.spongepowered:mixin:0.8.5-SNAPSHOT') {
            exclude module: 'launchwrapper'
            exclude module: 'guava'
            exclude module: 'gson'
            exclude module: 'commons-io'
            exclude module: 'log4j-core'
        }
    } else {
        implementation('org.spongepowered:mixin:0.8.5-SNAPSHOT') {
            exclude module: 'launchwrapper'
            exclude module: 'guava'
            exclude module: 'gson'
            exclude module: 'commons-io'
            exclude module: 'log4j-core'
        }
    }

    annotationProcessor 'org.spongepowered:mixin:0.8.5-SNAPSHOT:processor'
}

def refMap = "${tasks.compileJava.temporaryDir}" + File.separator + refMapping
def mixinSrg = "${tasks.reobf.temporaryDir}" + File.separator + "mixins.srg"

jar {
    from refMap
    manifest {
        attributes.put("TweakClass", "org.spongepowered.asm.launch.MixinTweaker")
        attributes.put("FMLCorePluginContainsFMLMod", true)
        attributes.put("ForceLoadAsMod", true)
        attributes.put("MixinConfigs", mixinConfig)
    }

    from {
        configurations.includeCompile.collect {
            exclude '**/LICENSE.txt'
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

reobf {
    addExtraSrgFile mixinSrg
}

afterEvaluate {

    tasks.compileJava {
        println "Path: " + projectDir.absolutePath
        options.compilerArgs += [
                // "-processorpath", projectDir.absolutePath + '/' + fixedRelPathToAP,
                "-processor", "org.spongepowered.tools.obfuscation.MixinObfuscationProcessorInjection,org.spongepowered.tools.obfuscation.MixinObfuscationProcessorTargets",
                "-Xlint:-sunapi", "-XDenableSunApiLintControl", "-XDignore.symbol.file",
                "-AreobfSrgFile=${tasks.reobf.srg}", "-AoutSrgFile=${mixinSrg}", "-AoutRefMapFile=${refMap}"
        ]
    }
}

sourceSets {
    main {
        ext.refMap = refMapping
    }
}
// === === === === === === Mixin Path End === === === === === ===
